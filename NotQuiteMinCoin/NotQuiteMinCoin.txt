The following problem was asked of me on a coding test for an interview.  
No non disclosure documents were signed, but I'm going to keep the company's name to myself to make sure their questions aren't revealed.  


A country has coins with the following values in circulation:
1, 2, 5, 10, 20, 50, 100, 200

Given an infinate number of each coin, how many ways can one use these coin values to create a value of 200?





My thought process:
It's sort of like the min coin problem, but not quite.  Instead of finding the smallest possible way to make change, we want ALL of the ways. 
The knapsack algorithms for this don't quite work then...I'll need a different approach then

Anyway:
200 is a really big number... what about smaller numbers?
There is exactly one way to give the value 1: you use the value 1 coin
There are two ways to give the value 2: you use the value 2 coin or two 1 coins
There are four ways to make 5: 
	1+1+1+1+1
	1+1+2+1
	2+2+1
	5 
Essentially, one could use all 1s or combine those 1s into higher values.  
Thus, if one can find the way to make 5 using the greatest possible numbers less than 5 (in this case 2+2+1)
one can use that information to figure out how many ways there are to make 5
2+2+1 
each 2 can be made in 2 different ways: using a 2 coin or two 1 coins
each 1 can be made in 1 way.  
We could break down none of the 2s (2+2+1)
We could break down one of the 2s (1+1+2+1)
We could break down both of the 2s (1+1+1+1+1)
Or, we could just give them a 5 coin.

I have a recursive solution that finds the greatest possible way to make n, 
breaks n down into its largest components smaller than n, and runs the algorithm on those
Once the number of combinations has been found for a number, it is saved to a dictionary in the form of {number: ways to make that number}

Thus before we can calculate 200, we need to know how many ways there are to make 100 and so on
It's not quite a divide and conquor algorithm, and it's not quite dynamic programming (although it may very well be if I altered the algorithm a bit)

This solution didn't land me a job which is a bit dissapointing, but the problem did get me to think in a new and different way and that's always fun.  